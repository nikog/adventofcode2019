// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function readInput(param) {
  return Fs.readFileSync(__dirname + "/input", "utf8");
}

function action(cmd, p1, p2) {
  if (cmd !== 1) {
    if (cmd !== 2 || !(p1 !== undefined && p2 !== undefined)) {
      return ;
    } else {
      return Caml_int32.imul(p1, p2);
    }
  } else if (p1 !== undefined && p2 !== undefined) {
    return p1 + p2 | 0;
  } else {
    return ;
  }
}

function loop(input, _index) {
  while(true) {
    var index = _index;
    var match = (input.length - 1 | 0) >= index;
    if (match) {
      var cmd = Caml_array.caml_array_get(input, index);
      if (cmd >= 3 || cmd <= 0) {
        return input;
      } else {
        var p1 = Caml_array.caml_array_get(input, Caml_array.caml_array_get(input, index + 1 | 0));
        var p2 = Caml_array.caml_array_get(input, Caml_array.caml_array_get(input, index + 2 | 0));
        var pos = Caml_array.caml_array_get(input, index + 3 | 0);
        var value = action(cmd, p1, p2);
        if (value !== undefined) {
          Caml_array.caml_array_set(input, pos, value);
        }
        _index = index + 4 | 0;
        continue ;
      }
    } else {
      return input;
    }
  };
}

function solve(input) {
  return loop(input, 0);
}

var Part1 = {
  action: action,
  loop: loop,
  solve: solve
};

function solutionPart1(noun, verb) {
  var __x = Fs.readFileSync(__dirname + "/input", "utf8");
  return Caml_array.caml_array_get(loop($$Array.mapi((function (index, value) {
                        if (index !== 1) {
                          if (index !== 2) {
                            return value;
                          } else {
                            return verb;
                          }
                        } else {
                          return noun;
                        }
                      }), $$Array.map(Caml_format.caml_int_of_string, $$Array.of_list($$String.split_on_char(/* "," */44, __x)))), 0), 0);
}

console.log(solutionPart1(12, 2));

function solutionPart2(param) {
  var nouns = Belt_Array.range(0, 99);
  var verbs = Belt_Array.range(0, 99);
  var __x = Belt_Array.concatMany($$Array.map((function (noun) {
              return $$Array.map((function (verb) {
                            var match = solutionPart1(noun, verb);
                            if (match !== 19690720) {
                              return ;
                            } else {
                              return Caml_int32.imul(100, noun) + verb | 0;
                            }
                          }), verbs);
            }), nouns));
  var res = Belt_Array.keepMap(__x, (function (x) {
          return x;
        }));
  return Caml_array.caml_array_get(res, 0);
}

console.log(solutionPart2(/* () */0));

exports.readInput = readInput;
exports.Part1 = Part1;
exports.solutionPart1 = solutionPart1;
exports.solutionPart2 = solutionPart2;
/*  Not a pure module */
