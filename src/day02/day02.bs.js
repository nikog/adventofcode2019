// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function action(cmd, p1, p2) {
  if (cmd !== 1) {
    if (cmd !== 2 || !(p1 !== undefined && p2 !== undefined)) {
      return ;
    } else {
      return Caml_int32.imul(p1, p2);
    }
  } else if (p1 !== undefined && p2 !== undefined) {
    return p1 + p2 | 0;
  } else {
    return ;
  }
}

function loop(input, _index) {
  while(true) {
    var index = _index;
    var match = (input.length - 1 | 0) >= index;
    if (match) {
      var cmd = Caml_array.caml_array_get(input, index);
      if (cmd >= 3 || cmd <= 0) {
        return input;
      } else {
        var p1 = Caml_array.caml_array_get(input, Caml_array.caml_array_get(input, index + 1 | 0));
        var p2 = Caml_array.caml_array_get(input, Caml_array.caml_array_get(input, index + 2 | 0));
        var pos = Caml_array.caml_array_get(input, index + 3 | 0);
        var value = action(cmd, p1, p2);
        if (value !== undefined) {
          Caml_array.caml_array_set(input, pos, value);
        }
        _index = index + 4 | 0;
        continue ;
      }
    } else {
      return input;
    }
  };
}

function solve(input) {
  return loop(input, 0);
}

var Part1 = {
  action: action,
  loop: loop,
  solve: solve
};

exports.Part1 = Part1;
/* No side effect */
