// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ListLabels = require("bs-platform/lib/js/listLabels.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var re = (/([A-Z])(\d+)/);

function readInput(param) {
  return Fs.readFileSync(__dirname + "/input", "utf8");
}

function getCapture(result, i) {
  if (result !== undefined) {
    return Caml_option.nullable_to_opt(Caml_array.caml_array_get(Caml_option.valFromOption(result), i));
  }
  
}

function sum(coord, nextCoord) {
  return /* tuple */[
          coord[0] + nextCoord[0] | 0,
          coord[1] + nextCoord[1] | 0
        ];
}

function stringToCoords(wire) {
  var cursor = {
    contents: /* tuple */[
      0,
      0
    ]
  };
  var coords = $$Array.map((function (vector) {
          var result = re.exec(vector);
          var result$1 = result === null ? undefined : Caml_option.some(result);
          var direction = getCapture(result$1, 1);
          var distance = getCapture(result$1, 2);
          var nextCoord;
          if (direction !== undefined) {
            switch (direction) {
              case "D" :
                  nextCoord = distance !== undefined ? sum(cursor.contents, /* tuple */[
                          0,
                          Caml_int32.imul(Caml_format.caml_int_of_string(distance), -1)
                        ]) : /* tuple */[
                      0,
                      0
                    ];
                  break;
              case "L" :
                  nextCoord = distance !== undefined ? sum(cursor.contents, /* tuple */[
                          Caml_int32.imul(Caml_format.caml_int_of_string(distance), -1),
                          0
                        ]) : /* tuple */[
                      0,
                      0
                    ];
                  break;
              case "R" :
                  nextCoord = distance !== undefined ? sum(cursor.contents, /* tuple */[
                          Caml_format.caml_int_of_string(distance),
                          0
                        ]) : /* tuple */[
                      0,
                      0
                    ];
                  break;
              case "U" :
                  nextCoord = distance !== undefined ? sum(cursor.contents, /* tuple */[
                          0,
                          Caml_format.caml_int_of_string(distance)
                        ]) : /* tuple */[
                      0,
                      0
                    ];
                  break;
              default:
                nextCoord = /* tuple */[
                  0,
                  0
                ];
            }
          } else {
            nextCoord = /* tuple */[
              0,
              0
            ];
          }
          cursor.contents = nextCoord;
          return nextCoord;
        }), $$Array.of_list($$String.split_on_char(/* "," */44, wire)));
  return $$Array.append(/* array */[/* tuple */[
                0,
                0
              ]], coords);
}

function intersect2(param, param$1) {
  var match = param$1[1];
  var match$1 = param$1[0];
  var match$2 = param[1];
  var match$3 = param[0];
  var p0_x = match$3[0];
  var p0_y = match$3[1];
  var p1_x = match$2[0];
  var p1_y = match$2[1];
  var p2_x = match$1[0];
  var p2_y = match$1[1];
  var p3_x = match[0];
  var p3_y = match[1];
  var s1_x = p1_x - p0_x;
  var s1_y = p1_y - p0_y;
  var s2_x = p3_x - p2_x;
  var s2_y = p3_y - p2_y;
  var jooh = -s2_x * s1_y + s1_x * s2_y;
  if (jooh !== 0) {
    var s = (-s1_y * (p0_x - p2_x) + s1_x * (p0_y - p2_y)) / (-s2_x * s1_y + s1_x * s2_y);
    var t = (s2_x * (p0_y - p2_y) - s2_y * (p0_x - p2_x)) / (-s2_x * s1_y + s1_x * s2_y);
    var match$4 = s >= 0 && s <= 1 && t >= 0 && t <= 1;
    if (match$4) {
      return /* tuple */[
              p0_x + t * s1_x | 0,
              p0_y + t * s1_y | 0
            ];
    } else {
      return ;
    }
  }
  
}

function findIntersections(wireA, wireB) {
  var intersections = {
    contents: /* [] */0
  };
  $$Array.iteri((function (ia, a) {
          if (ia !== 0) {
            var segmentA_000 = Caml_array.caml_array_get(wireA, ia - 1 | 0);
            var segmentA = /* tuple */[
              segmentA_000,
              a
            ];
            return $$Array.iteri((function (ib, b) {
                          if (ib !== 0) {
                            var segmentB_000 = Caml_array.caml_array_get(wireB, ib - 1 | 0);
                            var segmentB = /* tuple */[
                              segmentB_000,
                              b
                            ];
                            var jooh = intersect2(segmentA, segmentB);
                            if (jooh !== undefined) {
                              intersections.contents = /* :: */[
                                jooh,
                                intersections.contents
                              ];
                              return /* () */0;
                            } else {
                              return /* () */0;
                            }
                          } else {
                            return /* () */0;
                          }
                        }), wireB);
          } else {
            return /* () */0;
          }
        }), wireA);
  return intersections.contents;
}

function solve(param) {
  var wireACoords = stringToCoords(param[0]);
  var wireBCoords = stringToCoords(param[1]);
  var intersections = findIntersections(wireACoords, wireBCoords);
  return ListLabels.fold_left((function (acc, i) {
                if (acc < i) {
                  return acc;
                } else {
                  return i;
                }
              }), Pervasives.max_int, List.map((function (intersection) {
                    var y = intersection[1];
                    var x = intersection[0];
                    if (x !== 0 || y !== 0) {
                      return Math.abs(x) + Math.abs(y) | 0;
                    } else {
                      return Pervasives.max_int;
                    }
                  }), intersections));
}

var Part1 = {
  getCapture: getCapture,
  sum: sum,
  stringToCoords: stringToCoords,
  intersect2: intersect2,
  findIntersections: findIntersections,
  solve: solve
};

function isBetween(param, param$1, param$2) {
  var c_y = param$2[1];
  var c_x = param$2[0];
  var b_y = param$1[1];
  var b_x = param$1[0];
  var a_y = param[1];
  var a_x = param[0];
  var crossproduct = (c_y - a_y) * (b_x - a_x) - (c_x - a_x) * (b_y - a_y);
  var dotproduct = (c_x - a_x) * (b_x - a_x) + (c_y - a_y) * (b_y - a_y);
  if (Math.abs(crossproduct) !== 0 || dotproduct < 0) {
    return false;
  } else {
    var squaredlengthba = (b_x - a_x) * (b_x - a_x) + (b_y - a_y) * (b_y - a_y);
    return dotproduct <= squaredlengthba;
  }
}

function toFloat(param) {
  return /* tuple */[
          param[0],
          param[1]
        ];
}

function distanceToIntersection(wire, coord) {
  var sum = {
    contents: 0
  };
  var intersected = {
    contents: false
  };
  $$Array.iteri((function (ia, a) {
          var match = intersected.contents;
          if (ia !== 0 && !match) {
            var segmentA_000 = Caml_array.caml_array_get(wire, ia - 1 | 0);
            var intersection = isBetween(toFloat(Caml_array.caml_array_get(wire, ia - 1 | 0)), toFloat(a), toFloat(coord));
            if (intersection) {
              var match$1 = segmentA_000;
              var distance = Math.abs(match$1[0] - coord[0] | 0) + Math.abs(match$1[1] - coord[1] | 0) | 0;
              sum.contents = sum.contents + distance | 0;
              intersected.contents = true;
              return /* () */0;
            } else {
              var match$2 = segmentA_000;
              var distance$1 = Math.abs(match$2[0] - a[0] | 0) + Math.abs(match$2[1] - a[1] | 0) | 0;
              sum.contents = sum.contents + distance$1 | 0;
              return /* () */0;
            }
          } else {
            return /* () */0;
          }
        }), wire);
  return sum.contents;
}

function solve$1(param) {
  var wireACoords = stringToCoords(param[0]);
  var wireBCoords = stringToCoords(param[1]);
  var intersections = findIntersections(wireACoords, wireBCoords);
  return ListLabels.fold_left((function (acc, i) {
                if (acc < i) {
                  return acc;
                } else {
                  return i;
                }
              }), Pervasives.max_int, List.map((function (coord) {
                    var wireADistance = distanceToIntersection(wireACoords, coord);
                    var wireBDistance = distanceToIntersection(wireBCoords, coord);
                    var v = wireADistance + wireBDistance | 0;
                    if (v !== 0) {
                      return v;
                    } else {
                      return Pervasives.max_int;
                    }
                  }), intersections));
}

var Part2 = {
  isBetween: isBetween,
  toFloat: toFloat,
  distanceToIntersection: distanceToIntersection,
  solve: solve$1
};

function solutionPart1(param) {
  var __x = Fs.readFileSync(__dirname + "/input", "utf8");
  var wires = $$Array.of_list($$String.split_on_char(/* "\n" */10, __x));
  var wiresA = Caml_array.caml_array_get(wires, 0);
  var wiresB = Caml_array.caml_array_get(wires, 1);
  return solve(/* tuple */[
              wiresA,
              wiresB
            ]);
}

function solutionPart2(param) {
  var __x = Fs.readFileSync(__dirname + "/input", "utf8");
  var wires = $$Array.of_list($$String.split_on_char(/* "\n" */10, __x));
  var wiresA = Caml_array.caml_array_get(wires, 0);
  var wiresB = Caml_array.caml_array_get(wires, 1);
  return solve$1(/* tuple */[
              wiresA,
              wiresB
            ]);
}

console.log("day03 part1", solutionPart1(/* () */0));

console.log("day03 part2", solutionPart2(/* () */0));

exports.re = re;
exports.readInput = readInput;
exports.Part1 = Part1;
exports.Part2 = Part2;
exports.solutionPart1 = solutionPart1;
exports.solutionPart2 = solutionPart2;
/* re Not a pure module */
