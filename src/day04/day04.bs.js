// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

function hasDoubleDigits(password) {
  var re = (/(\d)\1/);
  return re.test(String(password));
}

function hasExactlyDoubleDigits(password) {
  var re = (/(\d)(\1+)/mig);
  var results = String(password).match(re);
  var captures = results !== null ? results : /* array */[];
  return Belt_Array.some(Belt_Array.map(captures, (function (capture) {
                    return capture.length;
                  })), (function (count) {
                return count === 2;
              }));
}

function hasDecreasingDigits(password) {
  var passwordString = String(password);
  var found = {
    contents: false
  };
  Belt_Array.forEachWithIndex(passwordString.split(""), (function (i, value) {
          var rest = passwordString.slice(i + 1 | 0);
          var digit = Caml_primitive.caml_int_max(0, Caml_format.caml_int_of_string(value) - 1 | 0);
          var re = new RegExp("[0-" + (String(digit) + "]"));
          var hasDecreasingDigits = re.test(rest);
          var match = hasDecreasingDigits && !found.contents;
          if (match) {
            found.contents = true;
            return /* () */0;
          } else {
            return /* () */0;
          }
        }));
  return found.contents;
}

function make(lower, upper) {
  return Belt_Array.reduce(Belt_Array.range(lower, upper), 0, (function (acc, input) {
                var match = hasDoubleDigits(input) && !hasDecreasingDigits(input);
                if (match) {
                  return acc + 1 | 0;
                } else {
                  return acc;
                }
              }));
}

var Part1 = {
  make: make
};

function make$1(lower, upper) {
  return Belt_Array.reduce(Belt_Array.range(lower, upper), 0, (function (acc, input) {
                var match = hasExactlyDoubleDigits(input) && !hasDecreasingDigits(input);
                if (match) {
                  return acc + 1 | 0;
                } else {
                  return acc;
                }
              }));
}

var Part2 = {
  make: make$1
};

function readInput(param) {
  return Fs.readFileSync(__dirname + "/input", "utf8");
}

function solutionPart1(param) {
  var values = Fs.readFileSync(__dirname + "/input", "utf8").split("-");
  var match = Belt_Array.get(values, 0);
  var match$1 = Belt_Array.get(values, 1);
  if (match !== undefined && match$1 !== undefined) {
    return make(Caml_format.caml_int_of_string(match), Caml_format.caml_int_of_string(match$1));
  } else {
    return 0;
  }
}

function solutionPart2(param) {
  var values = Fs.readFileSync(__dirname + "/input", "utf8").split("-");
  var match = Belt_Array.get(values, 0);
  var match$1 = Belt_Array.get(values, 1);
  if (match !== undefined && match$1 !== undefined) {
    return make$1(Caml_format.caml_int_of_string(match), Caml_format.caml_int_of_string(match$1));
  } else {
    return 0;
  }
}

console.log("day04 part1", solutionPart1(/* () */0));

console.log("day04 part2", solutionPart2(/* () */0));

exports.hasDoubleDigits = hasDoubleDigits;
exports.hasExactlyDoubleDigits = hasExactlyDoubleDigits;
exports.hasDecreasingDigits = hasDecreasingDigits;
exports.Part1 = Part1;
exports.Part2 = Part2;
exports.readInput = readInput;
exports.solutionPart1 = solutionPart1;
exports.solutionPart2 = solutionPart2;
/*  Not a pure module */
