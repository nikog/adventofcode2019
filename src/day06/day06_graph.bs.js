// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function findNode(node, value, distance) {
  if (node) {
    var v = node[0];
    var match = v.value === value;
    if (match) {
      return /* tuple */[
              node,
              distance
            ];
    } else {
      var nodeRef = {
        contents: /* Empty */0
      };
      var childDistanceRef = {
        contents: distance
      };
      List.iter((function (item) {
              var node = findNode(item, value, distance + 1 | 0);
              if (node !== undefined) {
                var match = node;
                var match$1 = match[0];
                if (match$1) {
                  nodeRef.contents = /* Node */[match$1[0]];
                  childDistanceRef.contents = match[1];
                  return /* () */0;
                } else {
                  return /* () */0;
                }
              } else {
                return /* () */0;
              }
            }), v.children);
      return /* tuple */[
              nodeRef.contents,
              childDistanceRef.contents
            ];
    }
  }
  
}

function make(map) {
  return List.fold_left((function (param, path) {
                  var acc = param[0];
                  var jooh = path.split(")");
                  var bodyLabel = Caml_array.caml_array_get(jooh, 0);
                  var satelliteLabel = Caml_array.caml_array_get(jooh, 1);
                  var body = findNode(acc, bodyLabel, 0);
                  var satellite = /* Node */[{
                      value: satelliteLabel,
                      children: /* [] */0
                    }];
                  if (body !== undefined) {
                    var match = body;
                    var match$1 = match[0];
                    if (match$1) {
                      var v = match$1[0];
                      var satellites = v.children;
                      v.children = /* :: */[
                        satellite,
                        satellites
                      ];
                      return /* tuple */[
                              acc,
                              (param[1] + match[1] | 0) + 1 | 0
                            ];
                    }
                    
                  }
                  return /* tuple */[
                          /* Node */[{
                              value: bodyLabel,
                              children: /* :: */[
                                satellite,
                                /* [] */0
                              ]
                            }],
                          1
                        ];
                }), /* tuple */[
                /* Empty */0,
                0
              ], map)[1];
}

var Part1 = {
  make: make
};

exports.findNode = findNode;
exports.Part1 = Part1;
/* No side effect */
