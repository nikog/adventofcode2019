// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Day09$Adventofcode2019 = require("../day09/day09.bs.js");

function permutations(phases) {
  var match = Belt_SetInt.size(phases);
  if (match !== 1) {
    var ans = {
      contents: /* [] */0
    };
    Belt_SetInt.forEach(phases, (function (phase) {
            var remainingPhases = Belt_SetInt.remove(phases, phase);
            var innerPermutations = permutations(remainingPhases);
            return List.iter((function (innerPermutation) {
                          var permutation = List.append(/* :: */[
                                phase,
                                /* [] */0
                              ], innerPermutation);
                          ans.contents = /* :: */[
                            permutation,
                            ans.contents
                          ];
                          return /* () */0;
                        }), innerPermutations);
          }));
    return ans.contents;
  } else {
    return /* :: */[
            Belt_SetInt.toList(phases),
            /* [] */0
          ];
  }
}

function make(program) {
  var phases = Belt_SetInt.fromArray(/* array */[
        0,
        1,
        2,
        3,
        4
      ]);
  return Belt_List.reduce(permutations(phases), 0, (function (acc, permutation) {
                var signal = Belt_List.reduce(permutation, 0, (function (input, phase) {
                        var match = Day09$Adventofcode2019.Part1.make(program, /* array */[
                              phase,
                              input
                            ]);
                        return Caml_format.caml_int_of_string(Caml_array.caml_array_get(match[1], 0));
                      }));
                var match = signal > acc;
                if (match) {
                  return signal;
                } else {
                  return acc;
                }
              }));
}

var Part1 = {
  permutations: permutations,
  make: make
};

console.log(Pervasives.max_int);

function make$1(program) {
  var phases = Belt_SetInt.fromArray(/* array */[
        5,
        6,
        7,
        8,
        9
      ]);
  return Belt_List.reduce(permutations(phases), 0, (function (acc, permutation) {
                var ans = 0;
                var $$break = false;
                var inputs = $$Array.map((function (i) {
                        return /* :: */[
                                i,
                                /* [] */0
                              ];
                      }), $$Array.of_list(permutation));
                var outputs = Belt_Array.make(5, /* array */[]);
                while(!$$break) {
                  var signal = Belt_List.reduceWithIndex(permutation, ans, (function (input, param, i) {
                          if (input !== undefined) {
                            Caml_array.caml_array_set(inputs, i, List.append(Caml_array.caml_array_get(inputs, i), /* :: */[
                                      input,
                                      /* [] */0
                                    ]));
                            var param$1 = $$Array.of_list(Caml_array.caml_array_get(inputs, i));
                            var match = Day09$Adventofcode2019.Part1.make(program, param$1);
                            var output = match[1];
                            if (output.length !== Caml_array.caml_array_get(outputs, i).length) {
                              Caml_array.caml_array_set(outputs, i, output);
                              var match$1 = Belt_Array.get(output, output.length - 1 | 0);
                              if (match$1 !== undefined) {
                                return Caml_format.caml_int_of_string(match$1);
                              } else {
                                return ;
                              }
                            } else {
                              return ;
                            }
                          }
                          
                        }));
                  if (signal !== undefined) {
                    ans = signal;
                  } else {
                    $$break = true;
                  }
                };
                var match = ans > acc;
                if (match) {
                  return ans;
                } else {
                  return acc;
                }
              }));
}

var Part2 = {
  make: make$1
};

exports.Part1 = Part1;
exports.Part2 = Part2;
/*  Not a pure module */
