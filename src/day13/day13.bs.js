// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int64 = require("bs-platform/lib/js/int64.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Day09$Adventofcode2019 = require("../day09/day09.bs.js");

function loop(_i, outputs) {
  while(true) {
    var i = _i;
    var match = i < (outputs.length - 1 | 0);
    if (match) {
      var match$1 = Caml_array.caml_array_get(outputs, i + 2 | 0);
      if (match$1 === "2") {
        return 1 + loop(i + 3 | 0, outputs) | 0;
      } else {
        _i = i + 3 | 0;
        continue ;
      }
    } else {
      return 0;
    }
  };
}

function make(program) {
  var computer = Day09$Adventofcode2019.Part1.make;
  var match = Curry._4(computer, undefined, undefined, /* array */[], program);
  return loop(0, match[1]);
}

var Part1 = {
  loop: loop,
  make: make
};

function findTile(tile, _i, outputs) {
  while(true) {
    var i = _i;
    var match = i > 0;
    if (match) {
      var match$1 = Caml_array.caml_array_get(outputs, i - 2 | 0);
      var match$2 = Caml_array.caml_array_get(outputs, i - 1 | 0);
      var match$3 = Caml_array.caml_array_get(outputs, i);
      if (Caml_obj.caml_equal(match$3, tile)) {
        return /* tuple */[
                match$1,
                match$2
              ];
      } else {
        _i = i - 3 | 0;
        continue ;
      }
    } else {
      return ;
    }
  };
}

function findScore(_i, outputs) {
  while(true) {
    var i = _i;
    var match = i > 0;
    if (match) {
      var match$1 = Caml_array.caml_array_get(outputs, i - 2 | 0);
      var match$2 = Caml_array.caml_array_get(outputs, i - 1 | 0);
      var match$3 = Caml_array.caml_array_get(outputs, i);
      if (match$1 === "-1") {
        if (match$2 === "0") {
          return match$3;
        } else {
          _i = i - 3 | 0;
          continue ;
        }
      } else {
        _i = i - 3 | 0;
        continue ;
      }
    } else {
      return ;
    }
  };
}

function make$1(program) {
  var computer = Day09$Adventofcode2019.Part1.make;
  var ans = "0";
  var $$break = false;
  var inputs = /* array */[];
  Caml_array.caml_array_set(program, 0, 2);
  var pointer = 0;
  var relativeBase = 0;
  var instructions = program;
  var ball = /* tuple */[
    "0",
    "0"
  ];
  var paddle = /* tuple */[
    "0",
    "0"
  ];
  while(!$$break) {
    var exit = 0;
    var val;
    try {
      val = Curry._4(computer, pointer, relativeBase, inputs, instructions);
      exit = 1;
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Day09$Adventofcode2019.Waiting_for_instruction) {
        pointer = exn[1];
        relativeBase = exn[2];
        instructions = $$Array.map(Caml_int64.to_int32, exn[3]);
        var output = $$Array.map(Int64.to_string, exn[4]);
        var currentBall = findTile("4", output.length - 1 | 0, output);
        var currentPaddle = findTile("3", output.length - 1 | 0, output);
        if (currentBall !== undefined) {
          var b = currentBall;
          ball = b;
          if (currentPaddle !== undefined) {
            paddle = currentPaddle;
          }
          
        } else if (currentPaddle !== undefined) {
          paddle = currentPaddle;
        }
        var match = ball;
        var match$1 = paddle;
        var v = Caml_primitive.caml_int_compare(Caml_format.caml_int_of_string(match[0]), Caml_format.caml_int_of_string(match$1[0]));
        var joystick = v === 0 ? 0 : (
            v < 0 ? -1 : (
                v > 0 ? 1 : 0
              )
          );
        inputs = /* array */[joystick];
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      var outputs = val[1];
      $$break = true;
      var score = findScore(outputs.length - 1 | 0, outputs);
      if (score !== undefined) {
        ans = score;
      }
      
    }
    
  };
  return ans;
}

var Part2 = {
  findTile: findTile,
  findScore: findScore,
  make: make$1
};

exports.Part1 = Part1;
exports.Part2 = Part2;
/* No side effect */
